// <auto-generated />
using System;
using Avamotors.Domain.Infra.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Avamotors.Domain.Infra.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.0");

            modelBuilder.Entity("Avamotors.Domain.Entities.Availability", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CarId")
                        .HasColumnType("UNIQUEIDENTIFIER");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("UNIQUEIDENTIFIER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("DATETIME")
                        .HasColumnName("Date");

                    b.Property<bool>("FilledDate")
                        .HasColumnType("BIT")
                        .HasColumnName("FilledDate");

                    b.Property<decimal>("PriceInThisDay")
                        .HasPrecision(2, 2)
                        .HasColumnType("DECIMAL")
                        .HasColumnName("PriceInThisDay");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.ToTable("Availability", (string)null);
                });

            modelBuilder.Entity("Avamotors.Domain.Entities.Car", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("LONGTEXT")
                        .HasColumnName("Description");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR")
                        .HasColumnName("Image");

                    b.Property<double>("Km")
                        .HasPrecision(2, 2)
                        .HasColumnType("DECIMAL")
                        .HasColumnName("Km");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("NVARCHAR")
                        .HasColumnName("Model");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("NVARCHAR")
                        .HasColumnName("Name");

                    b.Property<Guid>("SellerId")
                        .HasColumnType("UNIQUEIDENTIFIER");

                    b.Property<string>("Year")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("NVARCHAR")
                        .HasColumnName("Year");

                    b.HasKey("Id");

                    b.HasIndex("SellerId");

                    b.ToTable("Car", (string)null);
                });

            modelBuilder.Entity("Avamotors.Domain.Entities.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR")
                        .HasColumnName("Address");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("NVARCHAR")
                        .HasColumnName("Sex");

                    b.HasKey("Id");

                    b.ToTable("Client", (string)null);
                });

            modelBuilder.Entity("Avamotors.Domain.Entities.Seller", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR")
                        .HasColumnName("Address");

                    b.HasKey("Id");

                    b.ToTable("Seller", (string)null);
                });

            modelBuilder.Entity("Avamotors.Domain.Entities.Availability", b =>
                {
                    b.HasOne("Avamotors.Domain.Entities.Car", "Car")
                        .WithMany("Availabilitys")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Car_Availabilitys");

                    b.HasOne("Avamotors.Domain.Entities.Client", "Client")
                        .WithOne("Availability")
                        .HasForeignKey("Avamotors.Domain.Entities.Availability", "ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Availability_Client");

                    b.Navigation("Car");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Avamotors.Domain.Entities.Car", b =>
                {
                    b.HasOne("Avamotors.Domain.Entities.Seller", "Owner")
                        .WithMany("Cars")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Cars_Owner");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Avamotors.Domain.Entities.Client", b =>
                {
                    b.OwnsOne("Avamotors.Domain.Shared.VOs.Cpf", "Cpf", b1 =>
                        {
                            b1.Property<Guid>("ClientId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("CPF")
                                .IsRequired()
                                .HasMaxLength(11)
                                .HasColumnType("NVARCHAR")
                                .HasColumnName("Cpf");

                            b1.HasKey("ClientId");

                            b1.ToTable("Client");

                            b1.WithOwner()
                                .HasForeignKey("ClientId");
                        });

                    b.OwnsOne("Avamotors.Domain.Shared.VOs.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("ClientId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasMaxLength(155)
                                .HasColumnType("NVARCHAR")
                                .HasColumnName("Email");

                            b1.HasKey("ClientId");

                            b1.HasIndex("Address")
                                .IsUnique();

                            b1.ToTable("Client");

                            b1.WithOwner()
                                .HasForeignKey("ClientId");
                        });

                    b.OwnsOne("Avamotors.Domain.Shared.VOs.Name", "Name", b1 =>
                        {
                            b1.Property<Guid>("ClientId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(80)
                                .HasColumnType("NVARCHAR")
                                .HasColumnName("Name");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("ClientId");

                            b1.ToTable("Client");

                            b1.WithOwner()
                                .HasForeignKey("ClientId");
                        });

                    b.OwnsOne("Avamotors.Domain.Shared.VOs.Phone", "Phone", b1 =>
                        {
                            b1.Property<Guid>("ClientId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasMaxLength(11)
                                .HasColumnType("NVARCHAR")
                                .HasColumnName("Phone");

                            b1.HasKey("ClientId");

                            b1.ToTable("Client");

                            b1.WithOwner()
                                .HasForeignKey("ClientId");
                        });

                    b.Navigation("Cpf")
                        .IsRequired();

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();

                    b.Navigation("Phone")
                        .IsRequired();
                });

            modelBuilder.Entity("Avamotors.Domain.Entities.Seller", b =>
                {
                    b.OwnsOne("Avamotors.Domain.Shared.VOs.Cpf", "Cpf", b1 =>
                        {
                            b1.Property<Guid>("SellerId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("CPF")
                                .IsRequired()
                                .HasMaxLength(11)
                                .HasColumnType("NVARCHAR")
                                .HasColumnName("Cpf");

                            b1.HasKey("SellerId");

                            b1.ToTable("Seller");

                            b1.WithOwner()
                                .HasForeignKey("SellerId");
                        });

                    b.OwnsOne("Avamotors.Domain.Shared.VOs.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("SellerId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasMaxLength(155)
                                .HasColumnType("NVARCHAR")
                                .HasColumnName("Email");

                            b1.HasKey("SellerId");

                            b1.HasIndex("Address")
                                .IsUnique();

                            b1.ToTable("Seller");

                            b1.WithOwner()
                                .HasForeignKey("SellerId");
                        });

                    b.OwnsOne("Avamotors.Domain.Shared.VOs.Name", "Name", b1 =>
                        {
                            b1.Property<Guid>("SellerId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(80)
                                .HasColumnType("NVARCHAR")
                                .HasColumnName("Name");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("SellerId");

                            b1.ToTable("Seller");

                            b1.WithOwner()
                                .HasForeignKey("SellerId");
                        });

                    b.OwnsOne("Avamotors.Domain.Shared.VOs.Phone", "Phone", b1 =>
                        {
                            b1.Property<Guid>("SellerId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasMaxLength(11)
                                .HasColumnType("NVARCHAR")
                                .HasColumnName("Phone");

                            b1.HasKey("SellerId");

                            b1.ToTable("Seller");

                            b1.WithOwner()
                                .HasForeignKey("SellerId");
                        });

                    b.Navigation("Cpf")
                        .IsRequired();

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();

                    b.Navigation("Phone")
                        .IsRequired();
                });

            modelBuilder.Entity("Avamotors.Domain.Entities.Car", b =>
                {
                    b.Navigation("Availabilitys");
                });

            modelBuilder.Entity("Avamotors.Domain.Entities.Client", b =>
                {
                    b.Navigation("Availability");
                });

            modelBuilder.Entity("Avamotors.Domain.Entities.Seller", b =>
                {
                    b.Navigation("Cars");
                });
#pragma warning restore 612, 618
        }
    }
}
